@using DevExtreme.AspNet.Mvc.Builders
@using DevExtreme.AspNet.Mvc;
<style>

    .hover-tabs-img-close {
        top: 175px;
        margin: 0px;
        position: absolute;
        font-weight: 600;
        z-index: 999;
        left: 17%;
    }
    .export-button {
        background-color: #ff794e;
        color: #000;
        border: none; /* Kenarlık yok */
        border-radius: 4px; /* Köşeleri yuvarla */
        cursor: pointer; /* İmleç şekli */
    }

        .export-button span {
            color: white; /* Metin rengi */
        }

        .export-button:hover {
            background-color: #ff794e; /* Üzerine gelindiğindeki arka plan rengi */
        }

    .dx-dropdownbutton-popup-wrapper.dx-popup-wrapper .dx-overlay-content
     {
        background: #ff794e;
        justify-content:center;
        border-radius: 0px 0px 35px 35px;
     }

    .dx-dropdownbutton-popup-wrapper .dx-list:not(.dx-list-select-decorator-enabled) .dx-list-item-content
    {
        color: white;
        margin: 0;
        padding: 10px;
        border-top: 1px double white;
        text-align-last: center;
    }

    .export-options {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

    .export-option {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .export-option:hover {
            background-color: #45a049;
        }
</style>

<div>
    <div><p class="hover-tabs-img-close" id="sonuc2">Filterle</p></div>
    <img src="~/WebDesign/img/hover-on-tabs.svg" id="sonuc" class="hover-tabs-img" alt="Filterle" />
</div>


<div>
    @(Html.DevExtreme().DataGrid<MotorAsinBasketProjectClient.UI.Models.ClientModels.ClientDocuments>()
        .DataSource(d => d.Mvc()
        .Controller("ClientDocument")
        .LoadAction("ClientDocumentList")
        .Key("Id"))
        .ID("accountGrid")
        .ColumnMinWidth(100)
        .ColumnAutoWidth(true)
        .ShowRowLines(true)
        .ColumnChooser(cc => cc
        .Enabled(true)
        .Mode(GridColumnChooserMode.Select))
@*        .Export(e => e.Enabled(true).AllowExportSelectedData(true))
*@        .ShowBorders(false)
        .Paging(paging => paging.PageSize(10))
        .Pager(pager =>
        {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new JS("[5, 10, 30, 70, 120, 180, 1000, 'all']"));
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
        })
        .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true).Width(600))
        .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
        .Columns(columns =>
        {
            columns.AddFor(m => m.DocumetType).Caption("Belge Türü").CssClass("text-center");
            columns.AddFor(m => m.LineType).Caption("Satir Tipi").CssClass("text-center");
            columns.AddFor(m => m.Billed).Caption("Faturalandırılan").CssClass("text-center");
            columns.AddFor(m => m.TlToltal).Caption("TL Toplam").CssClass("text-center");
            columns.AddFor(m => m.ProductReferance).Caption("Ürün No").CssClass("text-center");
            columns.AddFor(m => m.CustomerReferance).Caption("Müşteri No");
            columns.AddFor(m => m.DocumentNo).Caption("Döküman No").CssClass("text-center");
            columns.AddFor(m => m.DocumentDate).Caption("Belge tarihi").CssClass("text-center");
        })
        @*.Selection(s => s.Mode(SelectionMode.Multiple))*@
        .OnToolbarPreparing("onToolbarPreparing")
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(f => f.Visible(true))
        .Height(800)
        .FocusedRowEnabled(true)
        .FocusedRowKey(1).ElementAttr("class", "")
        .ShowBorders(true)
       @* .Export(e => e.Enabled(true)
        .AllowExportSelectedData(true)
        )*@
        .Grouping(g => g.AutoExpandAll(false)))
</div>

<script>
    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        if (!toolbarItems) {
            toolbarItems = [];
        }

        // Export options
        var exportOptions = [
            { id: 'json', text: 'JSON RAPOR AL' },
            { id: 'excel', text: 'Excel RAPOR AL' },
            { id: 'pdf', text: 'PDF RAPOR AL' }
        ];

        // Export button creation
        var exportButton = {
            widget: "dxDropDownButton",
            location: "before",
            options: {
                text: "Verileri Dışa Aktar",
                elementAttr: {
                    class: "export-button export-options" // CSS sınıfını belirtin
                },
                items: exportOptions,
                onItemClick: function (data) {
                    var selectedOption = data.itemData.id;

                    if (selectedOption === 'json') {
                        exportAsJson();
                    } else if (selectedOption === 'excel') {
                        exportAsExcel();
                    } else if (selectedOption === 'pdf') {
                        exportAsPdf();
                    }
                }
            }
        };

        toolbarItems.unshift(exportButton);
        e.toolbarOptions.items = toolbarItems;
    }

    function exportAsJson() {
        var grid = $("#accountGrid").dxDataGrid("instance");
        var visibleColumns = grid.getVisibleColumns();

        grid.option("paging.enabled", false);

        grid.getDataSource().load().done(function (result) {
            var gridDataSource = result;
            var filteredData = gridDataSource.map(function (item) {
                var filteredItem = {};
                visibleColumns.forEach(function (column) {
                    filteredItem[column.dataField] = item[column.dataField];
                });
                return filteredItem;
            });
            var json = JSON.stringify(filteredData);

            var blob = new Blob([json], { type: "application/json" });
            var url = URL.createObjectURL(blob);

            var a = document.createElement("a");
            a.href = url;
            a.download = "data.json";
            a.click();

            grid.option("paging.enabled", true);
        });
    }

    function exportAsExcel() {
        var grid = $("#accountGrid").dxDataGrid("instance");
        var visibleColumns = grid.getVisibleColumns();

        grid.option("paging.enabled", false);

        grid.getDataSource().load().done(function (result) {
            var gridDataSource = result;
            var filteredData = gridDataSource.map(function (item) {
                var filteredItem = {};
                visibleColumns.forEach(function (column) {
                    filteredItem[column.dataField] = item[column.dataField];
                });
                return filteredItem;
            });

            var worksheet = XLSX.utils.json_to_sheet(filteredData);
            var workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "Data");

            var excelData = XLSX.write(workbook, { bookType: "xlsx", type: "array" });

            var blob = new Blob([excelData], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
            var url = URL.createObjectURL(blob);

            var a = document.createElement("a");
            a.href = url;
            a.download = "data.xlsx";
            a.click();

            grid.option("paging.enabled", true);
        });
    }
    function exportAsPdf() {
        var grid = $("#accountGrid").dxDataGrid("instance");
        var visibleColumns = grid.getVisibleColumns();

        grid.option("paging.enabled", false);

        grid.getDataSource().load().done(function (result) {
            var gridDataSource = result;
            var filteredData = gridDataSource.map(function (item) {
                var filteredItem = {};
                visibleColumns.forEach(function (column) {
                    filteredItem[column.dataField] = item[column.dataField];
                });
                return filteredItem;
            });

            var doc = new jspdf.jsPDF(); // jsPDF nesnesini oluşturun

            var header = Object.keys(filteredData[0]);
            var tableData = [];
            tableData.push(header);

            filteredData.forEach(function (item) {
                var row = [];
                header.forEach(function (key) {
                    row.push(item[key]);
                });
                tableData.push(row);
            });

            var columnWidths = header.map(function () {
                return 40;
            });

            doc.autoTable({
                head: [tableData[0]],
                body: tableData.slice(1),
                startY: 10,
                columnStyles: {
                    0: { cellWidth: columnWidths[0] },
                    1: { cellWidth: columnWidths[1] },
                    2: { cellWidth: columnWidths[2] },
                    3: { cellWidth: columnWidths[3] },
                    4: { cellWidth: columnWidths[4] },
                    5: { cellWidth: columnWidths[5] },
                    6: { cellWidth: columnWidths[6] },
                    7: { cellWidth: columnWidths[7] }
                }
            });

            doc.save("data.pdf");

            grid.option("paging.enabled", true);
        });
    }
</script>
<script>
    window.addEventListener("load", function () {
        setTimeout(function () {
            var secilenID = document.getElementById("sonuc");
            secilenID.style.display = "none";
        }, 4000);
    });
    window.addEventListener("load", function () {
        setTimeout(function () {
            var secilenID = document.getElementById("sonuc2");
            secilenID.style.display = "none";
        }, 4000);
    });
</script>
